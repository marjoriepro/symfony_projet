{% extends "front/base.html.twig" %}

{% block main %}
	<div class="container">
		<h2>{{ product.name }}</h2>
		<h3>Prix :
			{{ product.price }}
			€</h3>
		<h3>Stock :
			{{ product.stock }}
			pièces
		</h3>
		<h4>
			Licence :
			{{ product.licence.name}}
		</h4>
		<h4>
			Catégorie :
			{{ product.category.name }}</h4>

		{% for image in product.media %}

			<img src="{{ asset('media/' ~ image.src) }}" alt="{{ image.alt }}">

		{% endfor %}

		<a
			href="{{ path("product_like", {'id' : product.id}) }}" class="btn btn-link js-likes">
			{# app.user est la variable qui enregistre le user connecté si 
																																																																							personne n'est connecté la variable est vide.#}
			{% if app.user and product.isLikedByUser(app.user) %}
				<i class="fas fa-thumbs-up"></i>
			{% else %}
				<i class="far fa-thumbs-up"></i>
			{% endif %}
			<span class="js-likes">{{ product.likes | length }}</span>
			<span class="js-label">J'aime</span>
		</a>

		<a
			href="{{ path("product_dislike", {'id' : product.id}) }}" class="btn btn-link js-dislikes">
			{# app.user est la variable qui enregistre le user connecté si 
																																																																							personne n'est connecté la variable est vide.#}
			{% if app.user and product.isDislikedByUser(app.user) %}
				<i class="fas fa-thumbs-down"></i>
			{% else %}
				<i class="far fa-thumbs-down"></i>
			{% endif %}
			<span class="js-dislikes">{{ product.dislikes | length }}</span>
			<span class="js-label">Je n'aime pas</span>
		</a>

        <a href="{{ path('add_cart', {'id' : product.id}) }}">Ajouter au panier</a>

	</div>


	<div class="comment">
		<div>
			<h3>Commentaires</h3>
		</div>
		{% for comment in product.comments %}

			<h4>Par
				{{ comment.user.firstname}}
				{{ comment.user.name }}, le
				{{ comment.date | date('d-m-y') }}</h4>
			<p>{{ comment.content }}</p>


			{% if app.user is same as(comment.user) %}

				<a href="{{ path('update_comment', {'id' : comment.id})}}">Modifier le commentaire</a>
				<a href="{{ path('delete_comment', {'id' : comment.id})}}">Supprimer le commentaire</a>

			{% endif %}

		{% endfor %}

		{% if app.user %}
			<div>
				{{ form(commentForm) }}
				</div>

			{% else %}

				<div>
					<p>Vous devez être connecté pour écrire un commentaire</p>
				</div>

			{% endif %}
		</div>


		<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
		<script>

			function onClickLike(event) {
event.preventDefault();

const url = this.href;
const spanCount = this.querySelector('span.js-likes');
const icone = this.querySelector('i');

axios.get(url).then(function (response) {
spanCount.textContent = response.data.likes;
if (icone.classList.contains('fas')) {
icone.classList.replace('fas', 'far');
} else {
icone.classList.replace('far', 'fas');
}


if (response.data.message == "like ajouté et dislike supprimé") {
const spanCount3 = document.querySelector('span.js-dislikes');
const icone3 = document.querySelector('i.fa-thumbs-down');

spanCount3.textContent = response.data.dislikes;

if (icone3.classList.contains('fas')) {
icone3.classList.replace('fas', 'far')
} else {
icone3.classList.replace('far', 'fas')
}
}


}).catch(function (error) {
if (error.response.status == 403) {
window.alert("Connexion requise")
} else {
window.alert("une erreur c'est produite");
}
});
}



function onClickDislike(event) {
event.preventDefault();
const url1 = this.href;
const spanCount1 = this.querySelector('span.js-dislikes');
const icone1 = this.querySelector('i');

axios.get(url1).then(function (response) {
spanCount1.textContent = response.data.dislikes;

if (icone1.classList.contains('fas')) {
icone1.classList.replace('fas', 'far');
} else {
icone1.classList.replace('far', 'fas');
}

if (response.data.message === "like supprimé et dislike ajouté")
{
    const spanCount2 = document.querySelector('span.js-likes');
    const icone2 = document.querySelector('i.fa-thumbs-up');
    spanCout2.textContent = response.data.likes;
    
    if (icone2.classList.contains('fas')) {

        icone2.classList.replace('fas', 'far');
        
    } else {
        icone2.classList.replace('far', 'fas');
    }
}

}).catch(function (error) {
if (error.response.status == 403) {
window.alert("Connexion requise")
} else {
window.alert("une erreur c'est produite");
}
});
}


document.querySelectorAll('a.js-likes').forEach(function (link) {
link.addEventListener('click', onClickLike)
})
document.querySelectorAll('a.js-dislikes').forEach(function (link) {
link.addEventListener('click', onClickDislike)
})




		</script>


	{% endblock %}
